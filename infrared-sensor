#!/usr/bin/python3

import ev3dev.ev3 as ev3
import ev3dev.core as ev3core

class CoolInfraredSensor:
    HEADING_CHANNEL = 0
    DISTANCE_CHANNEL = 1
    PROXIMITY_CHANNEL = 0

    def __init__(self):
        self.irs = ev3.InfraredSensor()
        pass

    def measure_proximity(self):
        self.irs.mode = self.irs.MODE_IR_PROX
        return self.irs.value(self.PROXIMITY_CHANNEL)

    def take_bearing(self):
        self.irs.mode = self.irs.MODE_IR_SEEK
        heading = self.irs.value(self.HEADING_CHANNEL)
        self.irs.mode = self.irs.MODE_IR_SEEK
        distance = self.irs.value(self.DISTANCE_CHANNEL)

        if self._is_bad_result(heading, distance):
            return None

        heading = self._normalise_heading(heading)
        return { "heading" : heading, "distance" : distance }

    def _is_bad_result(self, heading, distance):
        return distance == -128 or (heading == 0 and distance == 100)

    def _normalise_heading(self, heading):
        return max(-25, min(25, heading)) / 25.0

class LevelLeds:
    LEFT = ev3.Leds.LEFT
    RIGHT = ev3.Leds.RIGHT
    YELLOW = ev3.Leds.YELLOW
    GREEN = ev3.Leds.GREEN

    def __init__(self):
        self.leds = ev3.Leds()

    def indicate_error(self):
        self.leds.set_color(self.LEFT, self.YELLOW, 0.5)
        self.leds.set_color(self.RIGHT, self.YELLOW, 0.5)

    def indicate_heading(self, heading):
        left_brightness = max(0, heading * 1.0)
        right_brightness = max(0, heading * -1.0)
        self.leds.set_color(self.LEFT, self.GREEN, left_brightness)
        self.leds.set_color(self.RIGHT, self.GREEN, right_brightness)

class LevelLine:
    def draw(self, heading):
        left_width = int(max(0, heading * 1.0) * 39)
        right_width = int(max(0, heading * -1.0) * 39)
        padding = 39 - left_width
        total_width = left_width + 1 + right_width
        print(" " * padding + "*" * total_width)

class OutlierFilter:
    """Detects a single outlier value and replaces with the previous
    value. An outlier is a value close to -1.0 or 1.0 that differs
    from the previous two by more than configurable
    'extreme_jump'. Any value that differs from the previous two by
    more than 'max_jump' as also an outlier.
    """
    def __init__(self, extreme_jump, max_jump):
        self.prev = [0.0, 0.0, 0.0]
        self.extreme_jump = extreme_jump
        self.max_jump = max_jump

    def protect(self, value):
        self.prev = self.prev[1:]
        self.prev.append(value)
        diff = abs(self.prev[1] - self.prev[2])
        base_diff = abs(self.prev[0] - self.prev[2])
        is_extreme = abs(self.prev[2]) > 0.85 \
                     and diff > self.extreme_jump \
                     and base_diff > self.extreme_jump
        is_other_unsedirable = diff > self.max_jump \
                               and base_diff > self.max_jump
        if is_extreme or is_other_unsedirable:
            result = self.prev[1] # value is an outlier
        else:
            result = self.prev[2] # value is regular
        return result

class SmoothingFilter:
    """A low-pass filter with a configurable 'factor' (0.0 to 1.0) and
    pre-quantised input.
    """
    def __init__(self, factor, quantisation_step):
        self.factor = factor
        self.qstep = quantisation_step
        self.prev_result = 0.0

    def smooth(self, value):
        quantised = int(value * (1 / self.qstep)) * self.qstep
        result = self.prev_result + \
                 self.factor * (quantised - self.prev_result)
        self.prev_result = result
        return result

def main():
    print("Starting...")
    sensor = CoolInfraredSensor()
    ofilter = OutlierFilter(0.25, 0.6)
    sfilter = SmoothingFilter(0.4, 0.25)
    leds = LevelLeds()
    lline = LevelLine()
    print("Devices initialised, entering main loop")

    while True:
        bearing = sensor.take_bearing()

        if bearing is None:
            print("No bearing detected.")
            leds.indicate_error()
        else:
            raw_heading = bearing["heading"]
            heading = sfilter.smooth(ofilter.protect(raw_heading))
            leds.indicate_heading(heading)
            lline.draw(heading)
            print("raw: %4.2f, filtered: %4.2f" % (raw_heading, heading))

if __name__ == "__main__":
    main()
