#!/usr/bin/python3

import ev3dev.ev3 as ev3
import ev3dev.core as ev3core

class CoolInfraredSensor:
    HEADING_CHANNEL = 0
    DISTANCE_CHANNEL = 1
    PROXIMITY_CHANNEL = 0

    def __init__(self):
        self.irs = ev3.InfraredSensor()
        pass

    def measure_proximity(self):
        self.irs.mode = self.irs.MODE_IR_PROX
        return self.irs.value(self.PROXIMITY_CHANNEL)

    def take_bearing(self):
        self.irs.mode = self.irs.MODE_IR_SEEK
        heading = self.irs.value(self.HEADING_CHANNEL)
        self.irs.mode = self.irs.MODE_IR_SEEK
        distance = self.irs.value(self.DISTANCE_CHANNEL)

        if self._is_bad_result(heading, distance):
            return None

        heading = self._normalise_heading(heading)
        return { "heading" : heading, "distance" : distance }

    def _is_bad_result(self, heading, distance):
        return distance == -128 or (heading == 0 and distance == 100)

    def _normalise_heading(self, heading):
        return max(-25, min(25, heading)) / 25.0

class LevelLeds:
    LEFT = ev3.Leds.LEFT
    RIGHT = ev3.Leds.RIGHT
    YELLOW = ev3.Leds.YELLOW
    GREEN = ev3.Leds.GREEN

    def __init__(self):
        self.leds = ev3.Leds()

    def indicate_error(self):
        self.leds.set_color(self.LEFT, self.YELLOW, 0.5)
        self.leds.set_color(self.RIGHT, self.YELLOW, 0.5)

    def indicate_heading(self, heading):
        left_brightness = max(0, heading * 1.0)
        right_brightness = max(0, heading * -1.0)
        self.leds.set_color(self.LEFT, self.GREEN, left_brightness)
        self.leds.set_color(self.RIGHT, self.GREEN, right_brightness)

class HeadMotor:
    MAX_TURN_SEGMENT = 0.25 # Fraction of full cycle

    def __init__(self):
        self.motor = ev3core.MediumMotor(ev3.OUTPUT_C)
        self.full_cycle = self.motor.count_per_rot
        self.initial_pos = self.motor.position

        self.max_turn = self.full_cycle * self.MAX_TURN_SEGMENT
        self.min_pos = self.initial_pos - self.max_turn
        self.max_pos = self.initial_pos + self.max_turn
        self.position = self.initial_pos
        print("Operating a medium motor with ", self.full_cycle,
              " counts per rotation.")

    def turn(self, heading):
        turn_amount = heading * self.max_turn
        new_pos = self.position + turn_amount
        if (new_pos > self.min_pos and new_pos < self.max_pos):
            print("Turning for ", turn_amount, " degrees.")
            self.motor.run_to_rel_pos(position_sp=turn_amount, speed_sp=200,
                                      stop_action="coast")
        else:
            print("Maximum turn position reached.")
        self.position = self.motor.position
        print("Head position: ", self.position)

class PidController:
    def __init__(self, kp, ki, kd):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.prev_error = 0.0
        self.integral = 0.0

    def calculate(self, error):
        self.integral = self._normalise(self.integral + error)
        derivative = self._normalise((error - self.prev_error))
        output = self.kp * error + self.ki * self.integral + \
            self.kd * derivative
        self.prev_error = error
        return output

    def _normalise(self, value):
        return min(1.0, max(value, -1.0))

def main():
    print("Starting...")
    sensor = CoolInfraredSensor()
    leds = LevelLeds()
    head = HeadMotor()
    pid = PidController(0.1, 0.0, 0.0) # P, I, and D
    print("Devices initialised, entering main loop")

    while True:
        bearing = sensor.take_bearing()

        if bearing is None:
            print("No bearing detected.")
            leds.indicate_error()
        else:
            heading = bearing["heading"]
            leds.indicate_heading(heading)
            head.turn(pid.calculate(heading))

if __name__ == "__main__":
  main()
